//
//  UsersInteractorTests.swift
//  CleanSwiftSample
//
//  Created by Parveen Bhatia on 3/27/18.
//  Copyright (c) 2018 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import CleanSwiftSample
import XCTest

class UsersInteractorTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: UsersInteractor!
    static var expectation: XCTestExpectation?
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupUsersInteractor()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupUsersInteractor()
    {
        sut = UsersInteractor()
    }
    
    // MARK: Test doubles
    
    class UsersPresentationLogicSpy: UsersPresentationLogic
    {
        var presentUserListCalled = false
        var presentErrorCalled = false
        
        func presentUserList(with response: Users.Response) {
            presentUserListCalled = true
            UsersInteractorTests.expectation?.fulfill()
        }
        
        func presentError(_ error: Error?) {
            presentErrorCalled = true
            UsersInteractorTests.expectation?.fulfill()
        }
        
    }
    
    class UsersWorkerSpy: UsersWorker
    {
        var getUsersCalled = false
        var shouldMockForSuccess = true
        
        override func getUsers(with request: Users.Request, closure: @escaping ([UserDetails]?, Bool, Error?) -> Void)
        {
            getUsersCalled = true
            if shouldMockForSuccess {
                closure([], true, nil)
            }
            else {
                closure(nil, false, nil)
            }
        }

    }
    
    
    // MARK: Tests
    
    func testLoadUsersSuccess()
    {
        // Given
        let workerSpy = UsersWorkerSpy()
        workerSpy.shouldMockForSuccess = true
        sut.worker = workerSpy
        let presenterSpy = UsersPresentationLogicSpy()
        sut.presenter = presenterSpy
        let request = Users.Request()
        
        UsersInteractorTests.expectation = expectation(description: "Load users should load with Success")

        // When
        sut.loadUsers(request: request)
        waitForExpectations(timeout: 2, handler: nil)
        
        // Then
        XCTAssertTrue(workerSpy.getUsersCalled, "loadUsers(request:) should ask the worker to get the users")
        XCTAssertTrue(presenterSpy.presentUserListCalled, "loadUsers(request:) should ask the presenter to format the result")
    }
    
    func testLoadUsersError()
    {
        // Given
        let workerSpy = UsersWorkerSpy()
        workerSpy.shouldMockForSuccess = false
        sut.worker = workerSpy
        let presenterSpy = UsersPresentationLogicSpy()
        sut.presenter = presenterSpy
        let request = Users.Request()
        
        UsersInteractorTests.expectation = expectation(description: "Load users should Fail")

        // When
        sut.loadUsers(request: request)
        waitForExpectations(timeout: 2, handler: nil)

        
        // Then
        XCTAssertTrue(workerSpy.getUsersCalled, "loadUsers(request:) should ask the worker to get the users")
        XCTAssertTrue(presenterSpy.presentErrorCalled, "loadUsers(request:) should ask the presenter to format the error in case of failure")
    }

}
